<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE article [
<!ENTITY % BOOK_ENTITIES SYSTEM "hoe-manns.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?xml-model href="/usr/share/xml/docbook/schema/rng/5.0/docbook.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<article version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink">
	<xi:include href="Article_Info.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
	<info>
		<title>&PRODUCT;</title>
	</info>
	<section>
		<info>
			<title>Introduction to &PRODUCT;</title>
		</info>
		<para> &PRODUCT; is a extension of the <application>&rb;</application> projectsoftware
				<application>hoe</application> (see <link
				xlink:href="https://github.com/seattlerb/hoe"
				xmlns:xlink="http://www.w3.org/1999/xlink">https://github.com/seattlerb/hoe</link>.)
			It extends the standard <application>&rb;</application> tasks to some new useful tasks. </para>
		<para> To use the software you will need a installed <application>&rb;</application> version
			(Higher or equal 2.2.0), <application>parseconfig</application>,
				<application>bundler-audit</application> and a installed and already configured
				<application>hoe</application>. </para>
	</section>

	<section>
		<info>
			<title>Installation</title>
		</info>
		<para> For installing you have to type in your Shell/Console: <command>gem install
				hoe-manns</command>. </para>
	</section>

	<section>
		<info>
			<title>How to use <productname>&PRODUCT;</productname> in your projects</title>
		</info>
		<para> First you have to open the <filename>Rakefile</filename> of your project and writes
			there near the <filename>Hoe.spec</filename> line: </para>
		<para>
			<code>Hoe.plugin :manns </code>
		</para>
		<para>
			<code>Hoe.spec 'yourproject' do ... </code>
		</para>
		<para>
			<code>end</code>
		</para>
		<para> Sure now you have to add <productname>&PRODUCT;</productname> as dependency in your
				<filename>Rakefile</filename> and generate a new <filename>Gemfile</filename> now.
			Then <productname>&PRODUCT;</productname> is ready to work. </para>
	</section>

	<section>
		<info>
			<title>Usage</title>
		</info>
		<para>
			<productname>&PRODUCT;</productname> integrates some additional
				<application>Rake</application>-Taks as explained in the next table. </para>
		<para>
			<table frame="all">
				<title>The Rake Tasks</title>
				<tgroup cols="2">
					<colspec colname="c1" colnum="1" colwidth="1.0*"/>
					<colspec colname="c2" colnum="2" colwidth="1.0*"/>
					<thead>
						<row>
							<entry>Task</entry>
							<entry>Effect</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><command>rake bundler:gemfile_lock</command></entry>
							<entry>generates a new <filename>Gemfile.lock</filename></entry>
						</row>
						<row>
							<entry><command>rake bundle-audit:run</command></entry>
							<entry>downloads the actual security warnings from
									<application>bundle-audit</application> and checks possible
								problems by the dependencies.</entry>
						</row>
						<row>
							<entry><command>rake clean-pkg</command></entry>
							<entry>checks if a "<filename>pkg</filename>" directory is present, if
								then it will be deleted.</entry>
						</row>
						<row>
							<entry><command>rake copy_master</command></entry>
							<entry>it expects a branch "develop" and merges the new stuff into the
								master branch. Then it runs a rake <command>git:tag</command> and
								returns again into the develop branch.</entry>
						</row>
						<row>
							<entry><command>rake remove_pre_gemspec</command></entry>
							<entry>checks the presence of a Pre-Gemspec (a generated file for test
								cases) and deletes them.</entry>
						</row>
						<row>
							<entry><command>rake run_before_release</command></entry>
							<entry>runs the task in that order: git:manifest, bundler:gemfile,
								bundler:gemfile_lock, gem:spec_remove, bundle_audit:run,
								copy_master.</entry>
						</row>
						<row>
							<entry><command>rake run_after_release</command></entry>
							<entry>runs the tasks: send_email and clean_pkg</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>
	</section>

	<section>
		<title>Additional Information</title>
		<para> The API-Dokumentation is placed there: <link
				xlink:href="http://www.rubydoc.info/gems/hoe-manns"
				xmlns:xlink="http://www.w3.org/1999/xlink"
				>http://www.rubydoc.info/gems/hoe-manns</link>. </para>
		<para> You can place Bugreports there: <link
			xlink:href="https://bugs.launchpad.net/hoe-manns"
				xmlns:xlink="http://www.w3.org/1999/xlink"
			>https://bugs.launchpad.net/hoe-manns</link>. </para>
		<para> You can place Feature Requests there: <link
			xlink:href="https://blueprints.launchpad.net/hoe-manns"
			xmlns:xlink="http://www.w3.org/1999/xlink"
			>https://blueprints.launchpad.net/hoe-manns</link>. </para>
		<para>
			<caution>
				<para> This software was developed and tested on a Linux system with RVM as
					Rubymanager. If anyone has any idea to make the software fit for other OS and
					Rubymanagers, then you can send a Pull-Request on Github. </para>
			</caution>
		</para>
	</section>

	<xi:include href="Feedback.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
	<xi:include href="Common_Content/GFDL.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
	<xi:include href="Revision_History.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
	<index/>
</article>
